#! /bin/sh

if [ -d ".docker" ] ||
   [ "$( sudo docker container inspect -f '{{.State.Status}}' nginx-test )" = "running" ] || 
   [ "$( sudo docker container inspect -f '{{.State.Status}}' php-fpm-test )" = "running" ];  then
    echo "Previous stage is still running, use stage-stop.sh"
    exit 1
fi

# remove old .docker temp folder and prepare the new one
mkdir .docker && mkdir .docker/api && mkdir .docker/log

# copy all front/back end folder their respective destination
cp -r dist .docker/html
cp -r public .docker/api/public
cp -r src .docker/api/src
cp -r .vendor .docker/api/.vendor
cp -r database .docker/api/database

# copy the .env file for php script in back-end
cp .env.example .docker/api/.env
sed -i -E 's#^API_URL=.+#API_URL="http://localhost:8001"#' '.docker/api/.env'
sed -i -E 's#^API_URI=.+#API_URI="/api/public/"#' '.docker/api/.env'

# Generate the env.js file for js script in front-end according to .env in back-end
echo "//Generated by start-docker.sh for functionnal test environment" > .docker/html/scripts/env.js
sed -n 's/^API/const &/p' '.docker/api/.env' >> .docker/html/scripts/env.js
sed -i 's#(DEV)#(STAGE)#' '.docker/html/index.html'

# build and launch the containers using docker
docker compose -f stage/compose.yml up -d