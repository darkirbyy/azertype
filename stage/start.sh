#! /bin/bash

# checking that the folder and the runner are not already up
if [ -d ".docker" ] ||
   [ "$( sudo docker compose -f stage/compose.yml ps -q nginx )" ] || 
   [ "$( sudo docker compose -f stage/compose.yml ps -q php-fpm )" ];  then
    echo "Previous stage is still running, use stage-stop.sh"
    exit 1
fi

# prepare the new docker folder and copy all front/back end folder 
mkdir -p .docker/app && mkdir -p .docker/log
cp -rp html public src vendor var .docker/app/

# copy the .env file for php script in back-end, and change some constants
cp .env-example .docker/app/.env
sed -i -E 's#^APP_ENV=.+#APP_ENV="STAGE"#' '.docker/app/.env'
sed -i -E 's#^GENERATOR_NAME=.+#GENERATOR_NAME="Self"#' '.docker/app/.env'
sed -i -E 's#^WORDS_PER_DRAW=.+#WORDS_PER_DRAW=5#' '.docker/app/.env'
sed -i -E 's#^TIME_INTERVAL=.+#TIME_INTERVAL="00:02:00"#' '.docker/app/.env'
sed -i -E 's#^API_URL=.+#API_URL="http://localhost:8001"#' '.docker/app/.env'
sed -i -E 's#^API_URI=.+#API_URI="/api/"#' '.docker/app/.env'

# Generate the env.js file for js script in front-end according to .env in back-end
echo "// Generated by start.sh for stage environment" > .docker/app/html/scripts/env.js
sed -n 's#^API#const &#p' '.docker/app/.env' >> .docker/app/html/scripts/env.js
sed -i 's#(DEV)#(STAGE)#' '.docker/app/html/index.html'

# build and launch the containers using docker then wait for all containers to be up
sudo docker compose -f stage/compose.yml up -d
echo "Waiting for log files to be created..."
while [ ! -f .docker/log/php-fpm-access.log ] || [ ! -f .docker/log/php-fpm-error.log ]; do
    sleep 1
done

# grant read privileges to all logs
sudo chmod -R a+r .docker/log
echo "Stage environment started (http://localhost:8001)"